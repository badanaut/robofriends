{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","marginTop","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLocaleLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAiBeA,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OACI,sBAAKC,UAAU,qDAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,gCACI,6BAAKF,IACL,4BAAIC,WCgBLK,EArBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAEf,OACI,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAQ,cAAC,EAAD,CAERR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKNC,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,8BACI,uBACAV,UAAU,kCACVW,KAAK,SACLC,YAAY,mBACZC,SAAUH,OCGPI,EAVA,SAACC,GAEZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,QAASC,UAAU,QAAvF,SACKL,EAAMM,YC2CJC,G,wDA1CX,aAAc,IAAD,8BACT,gBAaJC,eAAkB,SAACC,GACf,EAAKC,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAb1C,EAAKC,MAAM,CACPxB,OAAQ,GACRK,YAAa,IAJR,E,gEAQO,IAAD,OACfoB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAO/B,IAAD,OACCC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAQ,SAAAhC,GAC7C,OAAOA,EAAOP,KAAKwC,oBAAoBC,SAAS,EAAKV,MAAMnB,YAAY4B,wBAE3E,OAAgC,IAA7BF,KAAKP,MAAMxB,OAAOmC,OACV,4CAIH,sBAAKvC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBAEA,cAAC,EAAD,CAAWU,aAAcyB,KAAKZ,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUnB,OAAQ8B,a,GAjCxBM,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,EAAD,MAEAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.470ef4ea.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id} ) =>{\r\n    \r\n    return(\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card  from './Card';\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n   \r\n    return(\r\n        <div>\r\n        {\r\n            robots.map((user, i)=> {\r\n                return (<Card \r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email}\r\n                />\r\n                );\r\n        })\r\n        }\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return(\r\n        <div>\r\n            <input \r\n            className='pa3 ba b--blue bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots...'\r\n            onChange={searchChange}/>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    \r\n    return (\r\n        <div style={{overflowY: 'scroll', border:'1px solid black', height: '500px', marginTop:'10px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox'\r\nimport Scroll from './Scroll'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=> this.setState({robots: users}));\r\n    }\r\n\r\n    onSearchChange  = (event) => {\r\n        this.setState({ searchfield: event.target.value})\r\n        \r\n    }\r\n    render (){\r\n        const filteredRobots = this.state.robots.filter( robots =>{\r\n            return robots.name.toLocaleLowerCase().includes(this.state.searchfield.toLocaleLowerCase())\r\n        })\r\n        if(this.state.robots.length === 0){\r\n            return <h1>Loading...</h1>\r\n        }\r\n        else{\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    \r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n        \r\n            );\r\n        }        \r\n    }\r\n    \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}